[{"title":"Hello World","url":"/2021/10/27/hello-world/","content":"\n![](https://hc-jy-oss.oss-cn-shenzhen.aliyuncs.com/jyj-portal-banner/1634885321814.png)\n\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n<!--more-->\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n"},{"title":"一文搞懂CSS Flex布局","url":"/2021/03/27/flex布局/","content":"\ncss中，flex、grid 各种布局都是我们必须掌握的，作为常用功能又强大的flex布局你还没学会吗，全文没有一张图，用最通俗易懂的语言教你怎么用css中的flex布局。\n\n<!--more-->\n\n## 父容器属性\n\n### 开启flex\n\n```css\ndisplay: flex;\n```\n\n### 控制子元素水平方向对齐\n\n```css\njustify-content: flex-start/center/flex-end/space-between/space-around/space-evenly;\n```\n\n> `flex-start/center/flex-end` 子元素之间没有留白\n>\n> `space-between/space-around/space-evenly` 子元素之间留白相等\n\n- `flex-start` => `[ a b c ######## ]`\n- `center` => `[ #### a b c #### ]`\n- `flex-end` => `[ ######## a b c ]`\n- `space-between` => `[ a ### b ### c ]`  (两端无留白)\n- `space -evenly` => `[ ## a ## b ## c ## ]` (两端留白和子元素之间留白相等)\n- `space-around` => `[ # a ###  b ### c # ] ` (两端留白是子元素之间留白的一半)\n\n> **以上是针对于父容器的`flex-direction`属性为行模式的时候**\n>\n> **列模式时，`justify-content`和`align-items`的作用倒转过来，分别是**\n>\n> - **`justify-content` => 控制垂直方向对齐**\n>- **`align-items` => 控制水平方向对齐**\n\n**[什么是行模式和列模式？](#### 行模式&列模式)**\n\n### 控制子元素垂直方向对齐\n\n```css\nalign-items: flex-start/center/flex-end/stretch/baseline;\n```\n\n- `flex-start/center/flex-end` 和上边类似，就是方向换成垂直方向\n- `baseline` => 按照文字基线对齐\n- `stretch` => 子元素拉伸并在垂直方向铺满父容器\n\n> **以上是针对于父容器的`flex-direction`属性为行模式的时候**\n>\n> **列模式时，`justify-content`和`align-items`的作用倒转过来，分别是**\n>\n> - **`justify-content` => 控制垂直方向对齐**\n>- **`align-items` => 控制水平方向对齐**\n\n**[什么是行模式和列模式？](#### 行模式&列模式)**\n\n### 控制子元素排列方式\n\n```css\nflex-direction: row/column/row-reverse/column-reverse;\n```\n\n- `row` => 按行排列从左到右\n- `row-reverse` => 按行排列从右到左\n- `column` => 按列从上到下，子元素的宽度不需要撑满父容器\n- `column-reverse` => 按列从下到上，子元素的宽度不需要撑满父容器\n\n#### 行模式&列模式\n\n- 父容器的`flex-direction`属性为`row`/`row-reverse` => **行模式**\n- 父容器的`flex-direction`属性为`column`/`column-reverse` => **列模式**\n\n### 控制子元素的折行\n\n```css\nflex-wrap: wrap/nowrap;\nalign-content: flex-start/flex-end/center/space-between/space-evenly/space-around;\n```\n\n当`flex-wrap`的值为`wrap`的时候，折行的部分由`align-content`的属性来控制，其值的作用可参考`justify-conten`，当然了，折行发生的条件是子元素的宽度固定且不能收缩，并且超过了父容器的宽度\n\n----------------------------------------\n\n\n\n## 子元素属性\n\n\n\n### 子元素覆盖父容器的排列方式\n\n```css\nalign-seft: flex-start/center/flex-end/stretch/baseline;\nmargin: auto;\n```\n\n- `align-seft` => 覆盖父容器设置的`align-items`属性\n- `margin` => 覆盖父容器的`justify-content`属性\n\n### 子元素的空间占比\n\n```css\nflex: 1;\n```\n\n- `flex`属性的值表示该子元素占父容器的空间比，总容量是所有子元素的`flex`属性和\n\n### 子元素的增长\n\n```css\nflex-grow: 1;\n```\n\n`flex-grow`属性是指当父容器的空间还有空余的时候，子元素主动增长去撑满这些**空余空间**(**行模式下是宽度，列模式下是高度**)，而占这些空余空间的比列就是由`flex-grow`的值来决定的，默认不设置`flex-grow`的情况下，值为`0`，子元素不会主动增长\n\n当把所有的子元素的`flex-grow`都设置成相等 => `[ a-a-a b-b-b c-c-c]`\n\n或者中间的子元素的`flex-grow`是两边的子元素`flex-grow`的两倍 => `[ a-a b-b-b-b c-c]`\n\n### 子元素的收缩\n\n```css\nflex-shrink: 1;\n```\n\n`flex-shrink`属性和`flex-grow`属性相似，只不过作用在于收缩的时候，`flex-shrink`越大的子元素在收缩的时候收缩的高度/宽度更大，默认不设置`flex-shrink`的情况下，值为`1`，子元素收缩且收缩比例为`1`\n\n中间的子元素的`flex-shrink`是两边子元素`flex-shrink`的两倍 :\n\n`[ a-a-a-a-a-a b-b-b-b-b-b c-c-c-c-c-c- ]`  ->  `[ a-a-a-a b-b c-c-c-c ]`\n\n### 子元素的宽度/高度\n\n```css\nflex-basis: 200px;\n```\n\n- 行模式 => `flex-basis`控制子元素的宽度\n- 列模式 => `flex-basis`控制子元素的高度\n\n**[什么是行模式和列模式？](#### 行模式&列模式)**\n\n- 行模式下，如果设置了`flex-basis`，则子元素设置的`width`属性不会生效，`flex-basis`没有设置的情况下默认值为`auto`，也就是由内容决定\n- 列模式下，如果设置了`flex-basis`，则子元素设置的`height`属性不会生效，`flex-basis`没有设置的情况下默认值为`auto`，也就是由内容决定\n\n> 但是，虽然`width/height`属性会被覆盖，我们依然可以用`min-width/min-height`来限制最小宽高\n\n\n\n### 子元素的flex属性\n\n```css\nflex: 0 1 auto;\n```\n\n`flex`属性的值其实就是`flex-grow`、`flex-shrink`、`flex-basis` 这3种属性的缩写，默认值就是`0 1 auto`，也就对应\n\n```\nflex-grow: 0;\nflex-shrink: 1;\nflex-basis: auto;\n```\n\n即**不增长**，**收缩比例为1**，**宽度/高度为内容的宽度/高度**\n\n","tags":["css","flex"]},{"title":"vue中整合editor.md","url":"/2021/03/23/vue3中整合editor/","content":"\n在做毕设过程中需要在前端用到Markdown编辑器，一想就想到了Editor.md，虽然有和Vue整合好的mavonEditor可供选择，但是还是喜欢Editor.md，就想办法搞一下。\n\nEditor.md作为一个很成熟开元Markdown编辑器，虽然已经好久不更新了，但是无疑还是非常实用的，由于Editor.md并没有提供与Vue整合的直接方案，但是我们可以自己把它封装成一个Vue组件来使用。\n\n<!--more-->\n\n参考了两篇文章：\n\n> https://blog.csdn.net/jdbdh/article/details/90314447\n>\n> http://www.lwl.tech/post/3\n\n首先了解到Editor.md是通过附着在window对象上来暴露给用户使用的，并且在初始化的时候依赖了jQuery，那么我们要解决：\n\n1. 把jQuery挂载到window对象\n\n2. 异步加载editormd.mi.js后创建editor示例\n\n*MarkdownEditor.vue*\n\n```vue\n<template>\n  <div class=\"markdown-editor-box\">\n    <link rel=\"stylesheet\" href=\"/static/editormd/css/editormd.min.css\" />\n    <link rel=\"stylesheet\" :href=\"'/static/editormd/css/themes/' + themeCode\" />\n    <div :id=\"id\"></div>\n  </div>\n</template>\n<script>\nimport $ from \"jquery\";\nimport { v4 as uuid } from \"uuid\";\nimport { defaultConfig } from \"../../config/editor.md\";\n\nexport default {\n  name: \"MarkdownEditor\",\n  props: {\n    id: {\n      type: String,\n      default: uuid(),\n    },\n    config: {\n      type: Object,\n    },\n    themeCode: {\n      type: String,\n      default: \"atelier-forest-light.min.css\",\n      // preview at https://jmblog.github.io/color-themes-for-google-code-prettify/\n      // location /static/editormd/css/themes/\n    },\n    initData: {\n      type: String,\n    },\n    delay: {\n      type: Number,\n      default: 0,\n    },\n  },\n  data: function () {\n    return {\n      editor: null,\n    };\n  },\n  methods: {\n    getConfig: function () {\n      // return Object.assign(defaultConfig, this.config);\n      // or\n      return { ...defaultConfig, ...this.config };\n      // maybe add custom config from back-end\n      // return { ...defaultConfig, ...this.config, ...customConfig };\n    },\n    initEditor: function () {\n      let vm = this;\n      window.$ = window.jQuery = $;\n      (async () => {\n        await $.getScript(\"/static/editormd/editormd.min.js\");\n        let editor = window.editormd(this.id, this.getConfig());\n        vm.editor = editor;\n        // this.$nextTick(() => {\n        //   let editor = window.editormd(this.editorId, this.getConfig());\n        //   editor.on(\"load\", () => {\n        //     setTimeout(() => {\n        //       // hack bug: 一个页面多个编辑器只能初始化其中一个数据问题\n        //       this.editorLoaded = true;\n        //       this.initData && editor.setMarkdown(this.initData);\n        //     }, this.initDataDelay);\n        //   });\n        //   this.onchange &&\n        //     editor.on(\"change\", () => {\n        //       let html = editor.getPreviewedHTML();\n        //       this.onchange({\n        //         markdown: editor.getMarkdown(),\n        //         html: html,\n        //         text: window.$(html).text(),\n        //       });\n        //     });\n        //   this.editor = editor;\n        // });\n      })();\n    },\n  },\n  mounted: function () {\n    let vm = this;\n    vm.initEditor();\n  },\n  watch: {\n    initData: function (newVal) {\n      if (newVal) {\n        this.editorLoaded && this.editor.setMarkdown(newVal);\n      }\n    },\n  },\n};\n</script>\n```\n\n```\n\"undo\",\"redo\",\"|\",\"bold\",\"del\",\"italic\",\"quote\",\"ucwords\",\"uppercase\",\"lowercase\",\"h1\",\"h2\",\"h3\",\"h4\",\"h5\",\"|\",\"list-ul\",\"list-ol\",\"hr\",\"|\",\"link\",\"reference-link\",\"image\",\"code\",\"preformatted-text\",\"code-block\",\"table\",\"datetime\",\"emoji\",\"html-entities\",\"pagebreak\",\"goto-line\",\"watch\",\"preview\",\"fullscreen\",\"clear\",\"search\",\"help\",\"info\"\n```\n\n```\n\"undo\",\"redo\",\"|\",\"bold\",\"del\",\"italic\",\"quote\",\"list-ul\",\"list-ol\",\"hr\",\"|\",\"h1\",\"h2\",\"h3\",\"|\",\"link\",\"image\",\"code-block\",\"table\",\"||\",\"watch\",\"preview\",\"fullscreen\",\"clear\",\"search\"\n```\n\n","tags":["vue","editor.md"]},{"title":"vue中$nextTick的使用","url":"/2021/03/22/vue中$nextTick的使用/","content":"\n### 一、使用方法\n\n在vue中有一种情况，获取了数据后，需要对新视图进行下一步操作或者其他操作时，发现获取不到dom。因为赋值操作只完成了数据模型的改变并没有完成视图更新。在这个时候我们需要$nextTick函数（或者setTimeout）。<!--more-->\n 比如：\n\n\n\n```php\nnew Vue({\n  el: '#app',\n  data: {\n    list: []\n  },\n  mounted: function () {\n    this.get()\n  },\n  methods: {\n    get: function () {\n      this.$http.get('/api/article').then(function (res) {\n        this.list = res.data.data.list\n        // ref  list 引用了ul元素，我想把第一个li颜色变为红色\n        this.$refs.list.getElementsByTagName('li')[0].style.color = 'red'\n      })\n    }\n  }\n})\n```\n\n使用示例\n\n\n\n```kotlin\nthis.$nextTick(() => {\n        this.msg2 = this.$refs.msgDiv.innerHTML\n})\n```\n\n### 二、使用场景\n\n1、在生命周期created()中进行的dom操作一定要放到nextTick()的回调函数中。\n 2、在数据变化后要执行某个操作，而这个操作需要使用随数据变化而变化的dom结构时，这个操作都应该放进nextTick()的回调函数中。\n\n### 三、原因\n\nVue 异步执行 DOM 更新。只要观察到数据变化，Vue 将开启一个队列，并缓冲在同一事件循环中发生的所有数据改变。如果同一个 watcher 被多次触发，只会被推入到队列中一次。这种在缓冲时去除重复数据对于避免不必要的计算和 DOM 操作上非常重要。然后，在下一个的事件循环“tick”中，Vue 刷新队列并执行实际 (已去重的) 工作。Vue 在内部尝试对异步队列使用原生的 Promise.then 和MessageChannel，如果执行环境不支持，会采用 setTimeout(fn, 0)代替。\n\n\n\n作者：板栗栗\n链接：https://www.jianshu.com/p/aa21e186649d\n来源：简书\n著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。","tags":["vue","$nextTick"]},{"title":"Promise的UnhandledPromiseRejectionWarning问题","url":"/2021/02/25/Promise的UnhandledPromiseRejectionWarning问题/","content":"\n\n在封装Nodejs对MySQL的CRUD API的时候遇到了`UnhandledPromiseRejectionWarning`提示，查询了解到这是Node.js 6.6.0中增加的一个特性：对 Promise 中未处理的 rejection 默认会输出 `UnhandledPromiseRejectionWarning` 提示。\n\n<!--more-->\n\n先看看我原来的code：\n\n```javascript\nnew Promise((resolve, reject)=>{\n\tif(2>1) reject('foo')\n\tresolve('bar')\n})\n```\n\n也就是说，如果你定义的Promise没有进行Catch处理Rejection这种情况，就会有这个提示，解决方法有几个：\n\n1. 直接用resolve来返回错误代码而不用reject\n\n    反正最后promise都要返回点什么，用reject还是resolve有什么区别呢，我只要在用的时候根据返回的对象去主动判断这个promise是否是成功的也能达到一样的效果。\n\n    ```javascript\n    new Promise((resolve, reject)=>{\n    \tif(2>1) resolve({status: 0, msg: \"foo\"})\n    \tresolve({status: 1, msg: \"bar\"})\n    })\n    ```\n\n2. 直接在Promise里用空函数处理\n\n    ```javascript\n    new Promise((resolve, reject)=>{\n        if(2>1) reject(\"foo\")\n        resolve(\"bar\")\n    }).catch(()=>{})\n    ```\n    \n3. 用node process的全局`unhandledRejection`事件来处理\n\n\t```javascript\n   process.on('unhandledRejection', error => {\n     console.log('我帮你处理了', error.message);\n   });\n   \n   new Promise((resolve, reject)=>{\n       if(2>1) reject(\"foo\")\n       resolve(\"bar\")\n   })\n   ```\n   \n   注意，这种情况下，全局的`unhandledRejection`事件会优先处理这个错误，也就是像第二种在Promise里用Catch处理是不会生效的。\n\n","tags":["promise"]},{"title":"Express框架中请求内的错误处理","url":"/2021/02/24/Express框架中请求内的错误处理/","content":"\n\n> Whichever method you use, if you want Express error handlers to be called in and the application to survive, you must ensure that Express receives the error.\n\nExpress官方文档中提到，要确保你的Express程序在遇到错误的时候不会宕机，就得确保Express能接收到程序抛出的错误。\n\n<!--more-->\n\n## uncaughtException导致的node宕机\n\n如上所说，Express程序必须手动处理**所有**可能抛出的错误才不会发生宕机，或者说降低宕机的风险，这和node是息息相关的，毕竟Express是基于Nodejs的，在node中，在遇到`uncaughtException`时会直接结束node进程，之前写过一篇文章\n\n[Promise的UnhandledPromiseRejectionWarning问题](https://fateguy.com/note/20.html)\n\n就是提到的node的这个特性，对Promise对象没有用`.catch()`来捕捉错误就会使node可能宕机。\n\n当然了我们可以用pm2或者forever之类的node进程管理工具来管理重启和记录错误，这样也更利于我们之后对程序进行修复。\n\n但是，在运行过程中，我们还是更希望我们的程序宕机的次数越少越好，如果我们的程序的Session是存储在内存中的，那么程序宕机重启之后，所有的用户登录状态也将不复存在。\n\n## Error Handler 错误处理函数\n\nExpress框架内置了一个错误处理函数（Error Handler），这个函数是以中间件（MiddleWare）的形式来使用的，只不过这个中间件和其他的中间件稍微不一样，那就是错误处理函数接受4个参数，比常规中间件多了接收错误的参数`err`。\n\n```javascript\napp.use(function(err, req, res, next) {\n  // 处理错误\n});\n```\n\n错误处理函数一般定义在所有路由之后，为了确保Express程序不会因为错误而宕机，则需要把错误抛给这个错误处理函数来处理，在请求内有两种方式把错误抛给错误处理函数。\n\n直接`throw new Error()`\n\n```javascript\napp.get('/', function (req, res) {\n  throw new Error('BROKEN') // Express will catch this on its own.\n})\n```\n\n或者在`next()`函数中传入错误对象\n\n```javascript\napp.get('/', function (req, res, next) {\n  fs.readFile('/file-does-not-exist', function (err, data) {\n    if (err) {\n      next(err) // Pass errors to Express.\n    } else {\n      res.send(data)\n    }\n  })\n})\n```\n\n直接抛出错误，或者在`next()`函数中传入错误对象都能直接跳过剩余的路由，直接进入错误处理函数。\n\n参考官方文档\n\n> If you pass anything to the `next()` function (except the string `'route'`), Express regards the current request as being an error and will skip any remaining non-error handling routing and middleware functions.\n\n## next()函数\n\n上面的官方文档说道 **except the string `'route'`**\n\n意思即是`next()`直接跳到下一个**中间件**；传的值是字符串`route`即`next('route')`时，直接跳到下一个**路由**；传入其他值都会跳到错误处理函数。\n\n- next()——跳到下一个中间件\n- next(‘route’)——跳到下一个路由\n- next(err)——跳到错误处理函数\n\n注意`next()`和`next('route')`是分别跳到下一个**中间件**和**路由**，经常看到说`next()`函数会跳到下一个路由的，其实这样说是不准确的，一个路由可以有多个中间件来处理\n\n```js\nmw1 = function(req, res, next){}\nmw2 = function(req, res, next){}\nmw3 = function(req, res, next){}\nmw4 = function(req, res, next){}\n\napp.get('/', mw1, mw2, mw3)\napp.get('/', mw4)\n```\n\n例如在`mw1`函数中调用了`next()`，实际上是跳到`mw2`开始执行，而如果我们调用的是`next('route')`，那么就会直接跳过`mw2`和`mw3`，直接开始执行`mw4`。\n\n之所以有时候混淆是因为经常一个路由我们只用一个函数来处理，而不是链式处理，一个路由一个函数处理，调用`next()`和调用`next('route')`的效果是一样的。\n\n值得一提的还有，在官方文档中还提到\n\n> Starting with Express 5, route handlers and middleware that return a Promise will call `next(value)` automatically when they reject or throw an error.\n\n也就是说，从Express5开始，在请求中或者中间件中的Promise对象，即使没有手动调用`next(err)`和`throw new Error()`，如果Promise中抛出了错误或者`reject`了，那么Express会自动调用`next(err)`，其中的`err`为Promise内抛出的错误或者`reject`的值，如果不存在就传入一个默认的`Error`对象。\n\n","tags":["express","promise"]},{"title":"Mysql5.5版本中日期默认为CURRENT_TIMESTAMP报错","url":"/2021/02/21/Mysql5.5版本中日期默认为CURRENT_TIMESTAMP报错/","content":"\n\n建表的时候发现设置create_time列的默认值为CURRENT_TIMESTAMP时报错了，无非是两种报错：\n\n- 数据类型是datetime导致报错\n- 通个表同时存在两个字段为CURRENT_TIMESTAMP\n\n这是因为在Mysql5.6.5（也有说是5.6）版本之前，datetime类型的字段不会自动初始化并更新当前日期和时间，而timestamp类型的字段可以，并且每个表只能包含一个timestamp字段，而在此之后的版本，timestamp和datetime字段都可以自动初始化并更新当前日期和时间，并且没有限制字段数。\n\n解决方法也很简单：\n\n1. 升级到Mysql5.6.5版本或以上\n2. 创建触发器trigger来自动更新字段值\n\n","tags":["mysql"]},{"title":"JavaScript实现数据结构的栈、队列和双向链表","url":"/2020/12/22/JavaScript实现数据结构的栈、队列和双向链表/","content":"\n\n数据结构中的栈、队列和链表应该是最基础的了，还有像是图、树、二叉树、最优二叉树/解等等也很重要，前端也要会数据结构是我没想到的，总结一下用JavaScript实现数据结构中的栈、队列和链表中的双向链表。\n\n面试的时候被问到的数据结构题，当时是脑袋有点蒙的，用纸笔不知道怎么下手，过后自己写了一下其实并不难，尤其是栈和队列，可以直接直接用原生Array的pop()、push()、shift()、unshift()方法来实现，之前做JSON数据的时候还专门记录过这几个方法，真的是猪油蒙了心居然没写出来。\n\n<!--more-->\n\n#  栈、队列\n\n首先是栈和队列的实现，栈的核心思想是“先进后出”，队列的核心思想是“先进先出”，上课那会老师就不停得强调他们的区别，队列就像排队，先进先出；而栈是不讲道理的，先进后出。如果你当销售，先生产的产品堆压在仓库而把最新生产的产品拿来卖，到最后你可能会被老板批成PPT。\n\n先是栈的实现，看一下主要要实现的方法：\n\n- pop()：栈顶元素出栈并返回\n- push(el)：新元素入栈\n- peek()：返回栈顶元素\n- size()：返回栈的长度\n- isEmpty()：返回栈是否为空\n- clear()：清空栈\n- print()：打印栈\n\n```javascript\nclass Stack {\n  constructor(...val){\n    this.values = [...val]\n  }\n  pop(){\n    return this.values.pop()\n  }\n  push(val){\n    this.values.push(val)\n  }\n  peek(){\n    return this.values[this.values.length-1]\n  }\n  size(){\n    return this.values.length\n  }\n  isEmpty(){\n    return this.values.length == 0\n  }\n  clear(){\n    this.values = []\n  }\n  print(){\n    console.log(this.values.toString())\n  }\n}\n```\n\n然后是队列的实现，和栈的实现非常相似：\n\n- dequeue()：头元素出列\n- enqueue(el)：新元素入列\n- front()：返回队列头\n- size()：返回队列的长度\n- isEmpty()：返回是否为空队列\n- clear()：清空队列\n- print()：打印队列\n\n```javascript\nclass Queue {\n  constructor(...val){\n    this.values = [...val]\n  }\n  dequeue(){\n    return this.values.shift()\n  }\n  enqueue(val){\n    this.values.push(val)\n  }\n  front(){\n    return this.values[0]\n  }\n  size(){\n    return this.values.length\n  }\n  isEmpty(){\n    return this.values.length == 0\n  }\n  clear(){\n    this.values = []\n  }\n  print(){\n    console.log(this.values.toString())\n  }\n}\n```\n\n# 双向链表\n\n相比较于栈和队列，双向链表就稍微复杂一点。双向链表是没有顺序的，但是每个结点（Node）都会有指针（Pointer）指向该结点的前结点（Previous）和后结点（Next），还有一个头指针（Head）和尾指针（Tail）分别指向链表的头结点和尾结点，如果没有则指向`Null`，也即是空指针（Null Pointer），理论可能说不太清楚，还是图解比较条理清晰\n\n![image-20201221191959448](JavaScript实现数据结构的栈、队列和双向链表.assets/image-20201221191959448.png)\n\n然后是实现，首先我们得有一个结点类Node，包含前指针、后指针和数据：\n\n```javascript\nclass Node {\n  constructor(el) {\n    this.element = el\n    this.previous = null\n    this.next = null\n  }\n  toString(){\n    return this.element\n  }\n}\n```\n\n然后是链表的实现：\n\n- append(el)：添加结点元素\n- insert(position, el)：指定位置插入结点元素\n- getNode(position)：得到指定位置结点元素\n- get(position)：得到指定位置结点数据\n- indexOf(el)：返回指定结点的下标\n- update(position, el)：更新指定位置的结点\n- removeAt(position)：删除指定位置的结点\n- isEmpty()：返回链表是否为空\n- size()：返回链表的长度\n- toString()：重写toString()方法（因为数据结构是自定义的Node）\n- backwardString()：反序遍历输出结点数据\n- forwardString()：顺序遍历输出结点数据\n\n该有的注释都解释在代码里面了。\n\n```javascript\nclass DoubleLinkList {\n  head = null\n  tail = null\n  size = 0\n  append(el) {\n    if (this.size == 0) {\n      // 链表长度为零的时候\n      this.head = this.tail = el\n      this.size++\n      return\n    }\n    // 链表长度不是零的时候：从尾部添加\n    el.previous = this.tail\n    this.tail.next = el\n    this.tail = el\n    this.size++\n  }\n  insert(position, el) {\n    let current = null\n    // 插入位置在长度之外就默认添加到尾部\n    if(position >= this.size)\n      return this.append(el)\n    // 插入位置在链表头部之前默认插入到头部\n    if(position <= 0){\n      current = this.head\n      current.previous = el\n      el.next = current\n      this.head = el\n      this.size++\n      return\n    }\n    // 在中间插入\n    current = this.getNode(position)\n    el.previous = current.previous\n    el.next = current\n    current.previous.next = el\n    current.previous = el\n    this.size++\n  }\n  getNode(position) {\n    let index = 0\n    let current = null\n    // 如果链表为空\n    if (this.isEmpty())\n      return\n    // 如果溢出链表\n    if(position >= this.size || position < 0)\n      return\n    // 如果在在链表前半段，从头遍历\n    if((this.size / 2) > position){\n      current = this.head\n      while (index++ < position) {\n        current = current.next\n      }\n    } else {\n    // 如果在后半段，从尾遍历\n      current = this.tail\n      index = this.size - 1\n      while (index-- > position) {\n        current = current.previous\n      }\n    }\n    return current\n  }\n  get(position) {\n  // 和上一个方法一样，只不过返回的是结点的数据\n    let index = 0\n    let current = null\n    if (this.size == 0)\n      return\n    if(position >= this.size || position < 0)\n      return\n    if((this.size / 2) > position){\n      current = this.head\n      while (index++ < position) {\n        current = current.next\n      }\n    } else {\n      current = this.tail\n      index = this.size - 1\n      while (index-- > position) {\n        current = current.previous\n      }\n    }\n    return current.element\n  }\n  indexOf(el) {\n    let current = this.head\n    let index = 0\n    while(current){\n      // 从头遍历，符合结点返回下标否则返回-1\n      if(el.element == current.element)\n        return index\n      current = current.next\n      index++\n    }\n    return -1\n  }\n  update(position, el) {\n    if(position >= this.size || position < 0)\n    // 越界判断\n      return\n    let current = this.getNode(position)\n    current.element = el.element\n  }\n  removeAt(position) {\n    // 越界判断\n    if(position >= this.size || position < 0)\n      return\n    // 只有一个结点的时候\n    if(this.size == 1){\n      this.head = this.tail = null\n      this.size--\n      return\n    }\n    // 删除头结点的时候\n    if(position == 0){\n      this.head = this.head.next\n      this.head.previous = null\n      this.size--\n      return\n    }\n    // 删除尾结点的时候\n    if(position == this.size - 1){\n      this.tail = this.tail.previous\n      this.tail.next = null\n      this.size--\n      return\n    }\n    // 删除中间结点\n    let current = this.getNode(position)\n    current.previous.next = current.next\n    current.next.previous = current.previous\n    this.size--\n  }\n  isEmpty() {\n    return this.size == 0\n  }\n  size(){\n    return this.size\n  }\n  toString() {\n    return this.forwardString()\n  }\n  forwardString() {\n    // 从头开始遍历\n    let result = []\n    let current = this.head\n    while(current){\n      result.push(current.element)\n      current = current.next\n    }\n    return result.join(',')\n  }\n  backwardString() {\n    // 从尾开始遍历\n    let result = []\n    let current = this.tail\n    while(current){\n      result.push(current.element)\n      current = current.previous\n    }\n    return result.join(',')\n  }\n}\n```\n\n","tags":["数据结构","栈","队列","链表"],"categories":["javascript"]},{"title":"解决MySQL数据库登陆失败1045权限错误","url":"/2020/12/17/解决MySQL数据库登陆失败1045权限错误/","content":"\n\n从做完JavaWeb的项目之后，好久没打开过本地的MySQL，今天一打开突然就打不开了，反复确认了MySQL服务是在运行中，仍然是报1045权限错误。\n\n<!--more-->\n\n本地的MySQL只是用来调试，所以密码设置的很简单，也即是说不是因为密码错误才会出现1045错误，具体我也不了解，但是好像如果好久打开过MySQL就会大概率性遇到这个错误。\n\n首先打开MySQL安装目录，找到`my.ini`文件，MySQL的配置文件，打开找到`[mysqld]`这一行，在下面加一行\n```\nskip-grant-tables\n```\n然后保存，注意如果你的MySQL安装在C盘，得用管理员权限打开编辑器才能保存。然后打开服务管理重启MySQL，具体是`win+r`输入`services.msc`回车。\n\n然后打开MySQL，在输入密码的时候直接回车就可以进入了，进去之后\n```\nuse mysql;\nupdate user set password=password('123') where user = 'root' and host = 'localhost';\nflush privileges;\n```\n再次重启MySQL服务，登陆的时候输入你设置的密码就可以登录了。","tags":["mysql"]},{"title":"iplook面试总结","url":"/2020/12/14/iplook面试总结/","content":"\n\n广州，第三天，去面试了广州的一家通信公司的前端开发岗位。公司规模不算很大，但是氛围很好，进去之后根据前台小姐姐的指示找到了接待的地方，（应该是）人事部的小哥很面善，招呼我坐下来就给了我一份面试题和作答纸让我做了一份题，题目有20道，记录一下<!--more-->还记得一些：\n\n- 列举并简单说明 HTML5 的 input 标签\n- 说说 HTML5 的语义化标签\n- CSS 的选择器有哪些\n- 说说盒子模型\n- var 和 let 的作用域\n- 响应式技术有哪些\n- 简单画出 DOM 的树状结构图\n- 公司的logo是蓝色，有三级菜单，页面内容是一个表单里面有文本数据和提交，谈谈如何进行页面布局和配色\n- 客户端数据存储有哪些、有什么区别\n- 原生js实现栈、队列和双向链表\n- 怎么实现页面局部内容刷新技术\n- 对图形化编程的了解\n- 怎么解决跨域问题\n- 移动通信模型（这个有两个还是三个问题，我都不会也就没记住）\n\n还有几个题实在想不起来了，有好些我都不会，做的就不怎么样，所以后面面试的时候就没什么底气。面试我的是两个人，一个男的一个女的，没了解到他们是什么职位的，但应该是资深技术开发的或者经理岗的，首先是自我介绍环节，尽管在进来之前自己在外面吹着冷风练了好几次，但是还是有卡壳的地方，还是要多练练，紧张是不可能不紧张的，适当还好，过了那个度的话应该是挺减分的。男面试官让我说说我简历上写的项目经历，实际上这两个项目一个是前端课程的作品一个是自学nodejs的demo项目，挺简单的没有什么好说；女面试官就比较犀利了，问问题的速度比较快，气场非常强，一个一个问题紧逼着，问的也很掐点，好多我都答不上来，我记得的： \n\n- 项目是用什么搭建的，还了解过哪些工具\n- jQuery 框架的使用\n- canvas绘图了解多少\n- 语义化标签的作用\n- vue-cli 的使用\n- vuex 的作用和使用\n- vue的router怎么用\n- 前端怎么实现跨域（get/post）\n- HTTP协议（拓展TCP/IP）\n- 媒体查询怎么实现div在不同宽度下显示不同颜色\n\n其实好多都是根据面试题来问一些更深一点的，但是被女面试官的语言犀利到，脑子都没转过弯来也就没有回答好，归根到底还是自己知识沉淀不够，能力达不到水平。\n\n后面照例还是由人事的主管聊了一下问了一下我的基本情况，说了一下我的答题情况，问了一下我的专业，确定了我是软件工程专业之后问我为什么没答栈队列链表那道题，是不是数据结构不好。我只能回答手写不知道如何下手就没写，其实她应该看得出来我是不会，毕竟我也没想到居然要考数据结构（混过来的）。还问了我对他们公司有什么了解，是做什么产品的，由于自己没有准备充分没去查阅所以不太了解。中间也问我有什么想要了解的，得知他们公司目前是在用原生js开发的，毕竟是通信方面的，最求稳定安全为上，还没有开始用框架。最后就是客套了一下，问了期望薪资问了学校的就业情况身边的人的实习薪资等，走个流程。\n\n总的来说，这是一次成功的失败面试。于这次面试本身我是失败了的，面试出来不需要他们通知我也知道自己没有机会；但是通过这次面试找到了自己的很多问题，基础的薄弱块，也意识到自己离一份offer的差距有多少，今后继续加油。"},{"title":"使用JS操作Json数据的笔记","url":"/2020/03/25/js操作JSON数组/","content":"\n闲来无事（瞎折腾），在GitHub上看到好玩的API就拿来玩一下，因为要用到Json数据，就学了一下用原生的JavaScript操作Json数据。其实也没有怎么接触过Json数据，之前用GitHub的API写了个JS来获取我的repo里面的内容第一次用Json数据，在这里就记录一下。\n\n<!--more-->\n\n### Json对象\n\n```\n// JS中新建一个Json对象\nvar Json = {\"name\":\"value\"}\n\n// 添加/修改数据，通过key来访问\nJson[\"gender\"]=\"male\"\n// 或者\nJson.gender=\"male\"\n\n// 删除数据\ndelete Json.name\n\n```\n\n### Json数组的操作\n\n```\n// Json数组的操作\n// 新建\nvar Jsonarray = [{\"name\":\"zhangsan\"},{\"name\":\"lisi\"}]\n\n// 添加\n\nJsonarray.push({\"name\":\"wangwu\"})\n\nJsonarray.splice(1,0,{\"name\":\"wangwu\"})\n// 这里理解为在索引为1的位置插入一个（或多个）Json对象,占有从索引1开始位置\n// 也可以用来替换/修改Json数组对象，只要把第二个参数0改成非0，例如1\n// 就等同于 把从索引为1开始的1个对象（没有默认为空对象，也就是添加）替换成第三个参数{\"name\":\"wangwu\"}\n// 也就是说有第三个或者以上参数就是替换或者增加，没有则是删除\n\n// 修改，访问key来直接修改\nJsonarray[0].name=\"newname\"\n\n// 删除\ndelete Jsonarray[0] // 只是清空，但是其实还占有位置\n\nJsonarray.shift() // 删除第一项，返回删除的对象\nJsonarray.pop() // 删除最后一项，返回删除的对象\n// splice方法，上面有提到，也是返回删除的对象\n\n// 其实通过上面可以看出，Json数组也是一个普通的数组，操作也是和数组的操作一样的，只不过对象变成了Json对象\n\n```\n\n### Json的两个重要函数\n\n这两个函数分别是\n- `JSON.parse()`\n- `JSON.stringify()`\n\n`JSON.parse(a)`就是把a这个字符串解析成Json格式的对象\n\n`JSON.stringify(b)`就是把b这个Json对象解析成可以被识别的Json字符串\n\n可能这样说不太好理解，这么说吧，如果要通过POST协议传输Json类型的数据，但是是不能直接传输Json对象的，解析成字符串对象就可以。\n\n### 最后\n\n总所周知，Json对象是可以嵌套的，无论是对象或者数组都可以，但是操作方法都一样的，只要通过Json.key来访问到子对象/子数组，操作起来也是一样的。\n","tags":["Json","Json数组","JavaScript"],"categories":["个人笔记"]},{"title":"Chrome浏览器优秀拓展程序推荐","url":"/2020/03/10/Chrome浏览器优秀拓展程序推荐/","content":"\n<!-- ![thumbnail](https://i.loli.net/2020/03/11/3ZMPHniz2fYDsgw.jpg) -->\n\nChrome浏览器给我的印象一直是程序猿推荐浏览器的第一位，尽管它的内存占用确实不算是优秀，但是它的拓展程序丰富这一优点却可以盖过内存占用高这一不足。毕竟已经是0202年了，谁的电脑还带不起一个Chrome呢。\n\n<!--more-->\n\n# 前言\n----\n\n所有我推荐的这些拓展程序都是我自己在用或者用过，并且觉得非常优秀的，网上还是有很多优秀的Chrome拓展程序推荐的文章，就好比如我自己就有关注的[Chrome插件英雄榜](https://www.v2fy.com/chromeappheroes/)就总结了很多很实用的拓展程序。\n\nChrome拓展程序的高效使用可以依赖于快捷键，但是当拓展程序多了起来快捷键的学习时间成本就稍微有点高，但是熟悉了也就提高了很多效率。\n\n# 谷歌访问助手\n----\n\n首先我要推荐的是谷歌访问助手，不是每个人都有电脑24小时开着飞机的条件，但是如果你不能连上世纪互联网那么你就不能快乐地冲浪，也就不能通过[Chrome应用商店](https://chrome.google.com/webstore/category/extensions)来下载后面的一系列拓展程序了。\n\n[<i class=\"iconfont icon-link\"></i>官方网站直达地址](https://www.ggfwzs.com/)，下载之后导入浏览器就可以快乐地冲浪了，官网也有详细的教程。\n\n\n通过谷歌访问助手你就可以直接访问Google系列的网站，只要打开Chrome浏览器就会自动打开。Google系列的网站包括Google搜索，Gmail邮箱，Google翻译，Google Play应用商店，Google软件升级，Google Docs文档，Google地图，Google Drive云盘，Google Photos，Google Analytics，Google Adwords/AdSense，Chrome应用商店等Google公司旗下所有服务。\n\n![google-helper.jpg](https://i.loli.net/2020/03/11/V67UTzYyNskK31i.jpg)\n\n通过谷歌访问助手我们可以访问外网，但是切记在外网要言行谨慎，遵纪守法。\n\n> 仅为提供谷歌浏览器chrome商店解决偶尔打不开的问题\n> 仅为chrome浏览器扩展商店用户等需要的用户，提供服务。\n\n使用谷歌访问助手会要求用户吧主页设置为`https://2018.hao245.com/`或者其他第三方主页，开发者不易，如果能接受就尽量支持开发者吧。破解版也还是有的，这里就不放出来下载地址了，又不是不能用。\n\n# Google翻译\n----\n\nChrome浏览器还有一个特色的功能是非常优秀的，那就是它的全站翻译功能，可以直接把非自己的语言的网页翻译成自己的语言。但是全站翻译也是有一定的弊端，那就是不一定准确，有时候不能满足我们的需求，而Google翻译这个拓展程序可以为我们提供**划词翻译**的功能，精准翻译我们不认识的单词，当然了也得配合[谷歌访问助手](#谷歌访问助手)来使用，因为翻译用的是Google的接口。\n\n全站翻译功能：![google-translate-1.gif](https://i.loli.net/2020/03/11/exkTzYFSR7hQ8ju.gif)\n\n划词翻译拓展：![google-translate.gif](https://i.loli.net/2020/03/11/lPk13gaUNBj7ZTQ.gif)\n\n[<i class=\"iconfont icon-link\"></i>Google划词翻译直达地址](https://chrome.google.com/webstore/detail/google-translate/aapbdbdomjkkjkaonfhkkikfgjllcleb)（相信有了上面的[谷歌访问助手](#谷歌访问助手)，你也可以打开Chrome应用商店了。）\n\n# Adguard和Adblock\n\n现在互联网上铺天盖地的广告实在是令人心烦，本着和谐友爱地冲浪却总是被小广告恶心，关键是在现在的大数据分析，推荐的小广告有的时候真的很会让人分心，这绝对不能忍。Chrome有很多优秀的这类拓展，其中**Adblock**算是老牌的去广告利器了。我个人而言用过`Adblock`和`Adguard`，用户体验上其实差不多，都基本能达到干掉小广告的效果，至于选择哪一个就看个人了。\n\n![adblock.jpg](https://i.loli.net/2020/03/11/KmVuUMw1pFO8Jev.jpg)\n\n[<i class=\"iconfont icon-link\"></i>Adblock直达地址](https://chrome.google.com/webstore/detail/adblock-%E2%80%94-best-ad-blocker/gighmmpiobklfepjocnamgkkbiglidom?hl=zh-CN)&nbsp;[<i class=\"iconfont icon-link\"></i>Adguard直达地址](https://chrome.google.com/webstore/detail/adguard-adblocker/bgnkhhnnamicmpeenaelnjfhikgbkllg?hl=zh-CN)\n\n第一次自己摸索着配置完基本就是放着不用再管的。\n\n# OneNote Web Clipper\n\n内容采集类的拓展有很多，类如[印象笔记](https://chrome.google.com/webstore/detail/evernote-web-clipper/pioclpoplcdbaefihamjohnefbikjilc)、[Google Keep](https://chrome.google.com/webstore/detail/evernote-web-clipper/pioclpoplcdbaefihamjohnefbikjilc)都是比较优秀的，但是巨硬家的东西好用还是好用的，多平台同步，PC端的`Onenote`确实好用，而且如果你是Win板又有笔的话，用来记笔记是非常不错的。当然了也有一点就是，微软在国内是处于半墙状态，有时候会抽风，但是就我个人的体验来说其实还算不错，我是宽带和数据换着用都有，同步基本都是很快，宽带是电信的。\n\n`OneNote Web Clipper`的使用很简单，我是设置了快捷键，只要在我想要剪辑下来的页面`Alt+C`就可以剪辑下来，支持**整页**、**区域**、**文章**和**书签**四种方式剪辑：\n\n![onenote.jpg](https://i.loli.net/2020/03/11/mYhyS2zsEwuCj6q.jpg)\n\n其中整页和区域剪辑下来都是图片形式，我一般都是文章剪辑下来，可以后期编辑和做笔记。\n\n[<i class=\"iconfont icon-link\"></i>OneNote Web Clipper直达地址](https://chrome.google.com/webstore/detail/onenote-web-clipper/gojbdfnpnhogfdgjbigejoaolejmgdhk)\n\n# Tampermonkey\n\n如果你用的是Chrome浏览器而你没有听过用过油猴插件的话，那你真的是太屈才了。油猴插件能做到的事情那可就多了，列举我经常用的两个脚本就是`百度文库长文字复制`和`CSDN自动展开文章`。众所周知百度文库是限制了复制了，超过了一定的字数就不可以复制的；CSDN的文章折叠是我一直都很讨厌的一个机制，好好的读个文章非要多这一个步骤，搞学习的东西这绝对不能忍。\n\n[<i class=\"iconfont icon-link\"></i>Tampermonkey直达地址](https://chrome.google.com/webstore/detail/dhdgffkkebhmkfjojejmpbldmpobfkfo)&nbsp;[<i class=\"iconfont icon-link\"></i>油猴脚本库直达](https://greasyfork.org/zh-CN)\n\n当然了油猴的脚本能实现的功能绝不仅仅是如此，还有很多实用的脚本能让我们在网络上冲浪体验直线上升的，例如网课助手什么的在现在这个人人在家上网课的时期是非常有用的。\n\n# Tiny Notepad\n\n`Tiny Notepad`顾名思义，就是一个简单的记事本，我们的剪切板一次只能剪切一条消息，但是如果在一些网页之间频繁切换频繁复制粘贴的话这个东西还是拍的上用场的。\n\n![tinypad.jpg](https://i.loli.net/2020/03/11/WY7n5Ni2mcgeosb.jpg)\n\n[<i class=\"iconfont icon-link\"></i>Tiny Notepad直达地址](https://chrome.google.com/webstore/detail/tiny-notepad-minimalist-q/boofeaigohaafnfbmonmbnfklndgbgak)\n\n# Secure Shell App\n\n这其实严格意义上并不算是Chrome拓展，Chrome把它称作`Chrome App`，但是用起来还是一样的。顾名思义，就是一个在网页上SSH连接的小工具。其实用处不大，直接Win+CMD也就那样，我就是图他可以记录我之前登陆过的IP而已。\n\n![sshapp.jpg](https://i.loli.net/2020/03/11/BOcLlirNgj6GsxS.jpg)\n\n[<i class=\"iconfont icon-link\"></i>SSH App直达地址](https://chrome.google.com/webstore/detail/secure-shell-app/pnhechapfaindjhompbnflcldabbghjo)\n\n# 放在最后\n\n以上这些也就是我自己个人用到的Chrome插件而已，Chrome的插件库非常丰富，还有很多是我没有挖掘出来的，好不好用见仁见智。\n","tags":["Chrome Extension","Chrome","谷歌浏览器"]},{"title":"用Python的海龟画图画一个哆啦A梦","url":"/2020/02/17/python海龟画图画一个哆啦A梦/","content":"\n一年之前学的Python，过了这么久也差不多都还给老师了。我的傻吊儿子（误）喜欢哆啦A梦，前几天花了时间专门找了很多高清的哆啦A梦的海报挂上图床，突发奇想想到用Python的turtle画图能否实现画一个哆啦A梦....\n\n<!--more-->\n\n## 前言\n----\n\n由于实在是~~年代久远~~学艺不精，学的一点Python也还给老师了，加上前些天看课程直播讲到了Python又把Python装了回来，所以就有了尝试用turtle来画一个哆啦A梦的想法，自己琢磨了一会发现就只能画个头画眼睛化胡须啥的，身体其他部分完全没有思路怎么去画，就干脆点直接冲浪搜了，没想到还真的有人画这个，既然有现成，代码也能看的懂，那就拷贝下来自己研究研究吧。\n\n## 预览\n----\n\n先上一个最终的效果图吧 ☟☟☟\n\n![turtle画图哆啦A梦](https://cdn.jsdelivr.net/gh/adiynil/cloudimg@master/doraemon/GIF.gif)\n\n## 代码\n----\n\n```python\nimport turtle as t\nt.speed(20)\nt.pensize(4)\nt.hideturtle()\nt.screensize(500, 500, bg='white')\n# 猫脸\nt.fillcolor('#00A1E8')\nt.begin_fill()\nt.circle(120)\nt.end_fill()\nt.pensize(2)\nt.fillcolor('white')\nt.begin_fill()\nt.circle(100)\nt.end_fill()\nt.pu()\nt.home()\nt.goto(0, 134)\nt.pd()\nt.pensize(2)\nt.fillcolor(\"#EA0014\")\nt.begin_fill()\nt.circle(18)\nt.end_fill()\nt.pu()\nt.goto(7, 155)\nt.pensize(1)\nt.color('white', 'white')\nt.pd()\nt.begin_fill()\nt.circle(4)\nt.end_fill()\nt.pu()\nt.goto(-30, 160)\nt.pensize(2)\nt.pd()\nt.color('black', 'white')\nt.begin_fill()\na = 0.4\nfor i in range(120):\n    if 0 <= i < 30 or 60 <= i < 90:\n        a = a+0.08\n        t.lt(3) #向左转3度\n        t.fd(a) #向前走a的步长\n    else:\n        a = a-0.08\n        t.lt(3)\n        t.fd(a)\nt.end_fill()\nt.pu()\nt.goto(30, 160)\nt.pensize(2)\nt.pd()\nt.color('black', 'white')\nt.begin_fill()\nfor i in range(120):\n    if 0 <= i < 30 or 60 <= i < 90:\n        a = a+0.08\n        t.lt(3)  # 向左转3度\n        t.fd(a)  # 向前走a的步长\n    else:\n        a = a-0.08\n        t.lt(3)\n        t.fd(a)\nt.end_fill()\nt.pu()\nt.goto(-38,190)\nt.pensize(4)\nt.pd()\nt.right(-30)\nt.forward(15)\nt.right(70)\nt.forward(15)\nt.pu()\nt.goto(15, 185)\nt.pensize(2)\nt.pd()\nt.color('black', 'black')\nt.begin_fill()\nt.circle(13)\nt.end_fill()\nt.pu()\nt.goto(13, 190)\nt.pensize(1)\nt.pd()\nt.color('white', 'white')\nt.begin_fill()\nt.circle(5)\nt.end_fill()\n \nt.pu()\nt.home()\nt.goto(0, 134)\nt.pensize(2)\nt.pencolor('black')\nt.pd()\nt.right(90)\nt.forward(40)\nt.pu()\nt.home()\nt.goto(0, 124)\nt.pensize(1)\nt.pencolor('black')\nt.pd()\nt.left(10)\nt.forward(80)\nt.pu()\nt.home()\nt.goto(0, 114)\nt.pensize(1)\nt.pencolor('black')\nt.pd()\nt.left(6)\nt.forward(80)\nt.pu()\nt.home()\nt.goto(0,104)\nt.pensize(1)\nt.pencolor('black')\nt.pd()\nt.left(0)\nt.forward(80)\n# 左边的胡子\nt.pu()\nt.home()\nt.goto(0,124)\nt.pensize(1)\nt.pencolor('black')\nt.pd()\nt.left(170)\nt.forward(80)\nt.pu()\nt.home()\nt.goto(0, 114)\nt.pensize(1)\nt.pencolor('black')\nt.pd()\nt.left(174)\nt.forward(80)\nt.pu()\nt.home()\nt.goto(0, 104)\nt.pensize(1)\nt.pencolor('black')\nt.pd()\nt.left(180)\nt.forward(80)\nt.pu()\nt.goto(-70, 70)\nt.pd()\nt.color('black', 'red')\nt.pensize(2)\nt.seth(-60)\nt.begin_fill()\nt.circle(80,40)\nt.circle(80,80)\nt.end_fill()\nt.pu()\nt.home()\nt.goto(-80,70)\nt.pd()\nt.forward(160)\nt.pu()\nt.home()\nt.goto(-50,50)\nt.pd()\nt.pensize(1)\nt.fillcolor(\"#eb6e1a\")\nt.seth(40)\nt.begin_fill()\nt.circle(-40, 40)\nt.circle(-40, 40)\nt.seth(40)\nt.circle(-40, 40)\nt.circle(-40, 40)\nt.seth(220)\nt.circle(-80, 40)\nt.circle(-80, 40)\nt.end_fill()\n# 领带\nt.pu()\nt.goto(-70, 12)\nt.pensize(14)\nt.pencolor('red')\nt.pd()\nt.seth(-20)\nt.circle(200, 30)\nt.circle(200, 10)\n# 铃铛\nt.pu()\nt.goto(0, -46)\nt.pd()\nt.pensize(1)\nt.color(\"black\", '#f8d102')\nt.begin_fill()\nt.circle(25)\nt.end_fill()\nt.pu()\nt.goto(-5, -40)\nt.pd()\nt.pensize(2)\nt.color(\"black\", '#79675d')\nt.begin_fill()\nt.circle(5)\nt.end_fill()\nt.pensize(3)\nt.right(115)\nt.forward(7)\nt.mainloop()\n```\n\n----\n\n> 最后推荐一个很适合新手入门的Python社区—— <https://python123.io> ，是我们老师以前上课的时候安利给我们的，主要是里面东西都比较浅显易懂，Python是我觉得而且大部分人都这么觉得入门最简单的编程语言了。\n","tags":["Python","turtle"]},{"title":"使用Hexo主题icarus的深入浅出","url":"/2020/02/05/使用Hexo主题icarus的深入浅出/","content":"\n你现在所看到的站点是我使用Hexo在GitHub Page搭建的，用的主题是icarus，icarus这个主题非常好看而且配置很多很齐全，但是总有一些地方是不够用的，这里整理一下我自己对这个主题的修修改改。\n\n<!--more-->\n\n# 前言\n----\n\nicarus 的官方文档 [点击这里](https://easyhexo.com/2-Theme-use-and-config/2-12-hexo-theme-icarus/)\n\nicarus GitHub开源地址 [点击这里](https://github.com/ppoffice/hexo-theme-icarus)\n\nicarus 官方演示站点 [点击这里](https://blog.zhangruipeng.me/hexo-theme-icarus/)\n\n> 在官方演示站点你还能找到很多文档没有详细说明的配置，当然了你需要基础的英语阅读能力（都有吧）\n\n参考文章：\n\n[Hexo | 两个你可能会用到的icarus主题配置][1]\n[Hexo | 初识icarus主题中的Bulma框架][2]\n\n[1]: https://susreal.com/article/2019/hexo-theme-icarus-2/\n[2]: https://susreal.com/article/2019/hexo-theme-icarus-3/\n\n# 调整页面和侧边栏宽度\n----\n\n我们知道的是，icarus这个主题会自动适应显示多少列，例如只有你左侧栏有Widget才会显示左侧栏，否则不会显示，右侧栏一样。\n\n默认的页面宽度三列如下图：\n\n![默认两列](https://cdn.jsdelivr.net/gh/adiynil/cloudimg//screenshot-7.png)\n\n我修改之后：\n\n![我的博客](https://cdn.jsdelivr.net/gh/adiynil/cloudimg//screenshot-6.png)\n\n可以发现的是，同样是两列内容，我的页面内容更加饱满，对大屏幕用户更加友好。\n\n下面是我修改的地方\n\n## style.styl 的修改\n----\n\n    Position: /themes/icarus/source/css/style.styl\n\n``` css\n@media screen and (min-width: screen-widescreen)\n    .is-1-column .container\n    .is-2-column .container\n        max-width: screen-desktop - 2 * gap\n        width: screen-desktop - 2 * gap\n@media screen and (min-width: screen-fullhd)\n    .is-2-column .container\n        max-width: screen-widescreen - 2 * gap\n        width: screen-widescreen - 2 * gap\n    .is-1-column .container\n        max-width: screen-desktop - 2 * gap\n        width: screen-desktop - 2 * gap\n```\n\n这一段代码大概在21行开始，我的修改是把这四个 `2 * gap` 改成了`-1 * gap` ，如果你想调成其他宽度自行调整。\n\n## widget.ejs 的修改\n----\n\n    Position: /themes/icarus/layout/common/widget.ejs\n\n```java\nswitch (column_count()) {\n    case 2:\n        return 'is-4-tablet is-4-desktop is-4-widescreen';\n    case 3:\n        return 'is-4-tablet is-4-desktop is-3-widescreen';\n}\nreturn '';\n```\n\n我的修改是 `is-4-widescreen` 改成 `is-3-widescreen` 和 `is-3-widescreen` 改成 `is-2-widescreen`\n\n\n## layout.ejs 的修改\n----\n\n    Position: /themes/icarus/layout/layout.ejs\n\n```java\nswitch (column_count()) {\n    case 1:\n        return 'is-12';\n    case 2:\n        return 'is-8-tablet is-8-desktop is-8-widescreen';\n    case 3:\n        return 'is-8-tablet is-8-desktop is-6-widescreen' (意外发现源码少了个分号lol)\n}\nreturn '';\n```\n\n我的修改是 `is-8-widescreen` 改成 `is-9-widescreen` 和 `is-63-widescreen` 改成 `is-8-widescreen`\n\n# 添加文章置顶功能\n----\n\n文章置顶这个小功能，用起来还是很实用的。先来看一下最终效果：\n\n![置顶预览](https://cdn.jsdelivr.net/gh/adiynil/cloudimg//screenshot-8.png)\n\n## _config.yml 的修改\n----\n\n    Position: /yourblog/_config.yml\n\n```yml\nindex_generator:\n  path: ''\n  per_page: 10\n  order_by: \n    top: -1\n    date: -1\n```\n\n这里是吧top属性添加到排序索引里，即 `top: -1` 是加上去的。\n\n## generator.js 的修改\n----\n\n    Position: /yourblog//⁨node_modules⁩/hexo-generator-index⁩/lib⁩/generator.js\n\n```js\nvar paginationDir = config.pagination_dir || 'page';\n\n// 把这一段加上去\nposts.data = posts.data.sort(function(a, b) {\nif(a.top && b.top) {\n    if(a.top == b.top) return b.date - a.date;\n    else return b.top - a.top;\n}\nelse if(a.top && !b.top) {\n    return -1;\n}\nelse if(!a.top && b.top) {\n    return 1;\n}\nelse return b.date - a.date;\n});\n// \n\nvar path = config.index_generator.path || '';\n```\n\n## post.md 的修改\n----\n\n    Position: /yourblog/scaffolds/post.md\n\n```\ntitle: {{ title }}\ndate: {{ date }}\ntags:\ntop: 0\n```\n\n其中 `top: 0` 是加上去的，注意这里 `:` 和 `0` 之间是有空格的\n\n## article.ejs 的修改\n----\n\n    Position: /yourblog/themes/icarus/layout/common/article.ejs\n\n```jsp\n<% if (post.top>0) { %>\n<i class=\"fas fa-arrow-alt-circle-up\" style=\"color:#3273dc\"></i>\n<span class=\"level-item\" style=\"color:#3273dc\">&nbsp;置顶</span>\n<% } %>\n```\n\n这一段就加到你想要出现置顶标签的地方就可以了，预览效果就是我的[博客首页](https://yidas.cn)\n\n# 添加文章版权标识\n----\n\n[Creative Commons](https://creativecommons.org)\n\n先看一下预览：\n\n![版权标识](https://cdn.jsdelivr.net/gh/adiynil/cloudimg//screenshot-9.png)\n\n## _config.yml 的修改\n----\n\n    Position: /yourblog/themes/icarus/_config.yml\n\n```yml\n# 添加一个版权标识\n# date: 2020-02-05\n# \ncopyright:\n    enable: true\n```\n\n把这一段加到 `_config.yml` 的末尾，当然了不能只是末尾，就是怕你把参数切断而已。\n\n## article.ejs 的修改\n----\n\n    Position: yourblog/themes/icarus/layout/common/article.ejs\n\n在这个文件中搜索 `has_config('donate')` ，在这行的上方粘贴以下代码：\n\n```jsp\n<!-- 2020-02-05 添加文章版权标识 -->\n<% if (!has_config('copyright.enable') || get_config('copyright.enable') === true) { %>\n    <% if (!index) { %>\n    <div class=\"card\">\n        <div class=\"card-content\">\n            <p><strong>本文作者：</strong><a target=\"_blank\" href=\"<%= theme.url %>\"><%= theme.author %></a></p>\n            <p><strong>原始链接：</strong><a href=\"<%= page.permalink %>\" alt=\"<%= page.title %>\"><%= page.permalink %></a></p>\n            <p><strong>版权声明：</strong>本文采用<a rel=\"license\" target=\"_blank\" href=\"http://creativecommons.org/licenses/by-nc-sa/4.0/\">CC BY-NC-SA 4.0</a>进行许可</p>\n        </div>\n    </div>\n    <% } %>\n<% } %>\n<!-- end -->\n```\n\n完成以上修改，那么你就可以在主题的配置文件里选择是否开启版权标识功能了。\n\n----\n\n> *——生命不止，折腾不息*\n\n后续的更新也会在这篇文章更新，当然了你也可以在评论区和我一起探讨。","tags":["icarus","Hexo"],"categories":["干货"]},{"title":"如何使用Cloudflare来加速我的GitHub Page","url":"/2020/02/03/如何使用Cloudflare来加速我的GitHub Page/","content":"\n我用了两天时间搭建起来的站点，依赖于GitHub的Page服务，域名是在腾讯云购买的，但是众所周知的是GitHub现在基本是半墙的状态，如果你不能快乐地上网，那么很可能不能愉快的访问GitHub，都已经用GitHub来搭建站点了，那么就要想法子来白嫖CDN来加速我的站点在国内的访问速度。\n\n<!-- more -->\n\n----\n\n## 前言\n\n我的站点是依赖Hexo搭建在GitHub Page上的博客系统，本身就已经很轻量了，但是苦于国内访问确实慢，~~但是又没钱~~，所以只能白嫖Cloudflare的CDN，尽管Cloudflare也日常会抽风，但是起码有一点加成。\n\n----\n\n## 在Cloudflare添加站点\n\n你需要先注册一个 [Cloudflare](https://www.cloudflare.com/) 的账号，这个不赘述了，然后添加你的站点  \n\n![添加站点](https://cdn.jsdelivr.net/gh/adiynil/cloudimg//screenshot-1.png)  \n\n我们知道的是，Cloudflare免费套餐只能通过NS方式接入，这样用起来不够灵活、生效很慢（0~72小时），而且最重要的问题是没法在解析的时候手工解析到Cloudflare节点IP地址，这就达不到我的目的——指定节点解析。  \n\n>指定节点解析有什么用呢，比如说我用的是默认的解析，在国内访问可能会走美国的节点，就打不到加速的目的了，我的目的就是白嫖Cloudflare的香港节点，或者是日本、韩国的节点都比较快。\n\n----\n\n## 接入第三方管理平台\n\n这里我用到了第三方的Cloudflare管理平台 [BNXB](https://cdn.bnxb.com/) ，用API接入Cloudflare的账号来管理站点。通过这个平台我就可以用CNAME来解析我的站点来使用Cloudflare的CDN加速了，注意要选择CNAME解析。  \n\n配置好了之后的截图应该是这样的：\n\n![BNXD配置](https://cdn.jsdelivr.net/gh/adiynil/cloudimg//screenshot-2.png)  \n\n你需要在你的域名服务商那里添加一条CNAME记录解析到 [BNXB](https://cdn.bnxb.com/) 给你提供的地址，你可以在 `解析设置` 里看到对应的地址。解析了之后你要访问一次你的域名来激活SSL证书（当然你得有）。\n\n到了这一步你可以配置你的CDN了，你可以选择在 [Cloudflare](https://www.cloudflare.com/) 配置，或者如果你的英语不太好可以选择在 [BNXB](https://cdn.bnxb.com/) 配置，已经中文本土化了。详细的配置应该怎么配置可以百度有很多配置教程。\n\n## 自定义解析节点\n\n用第三方管理平台来管理Cloudflare不用NS接入，那么我们完全可以自己定义解析节点，只要是Cloudflare的节点就可以。  \n\nCloudflare自己发布节点的页面是 [IP Changes](https://www.cloudflare.com/ips/)  \n\n部分网友整理的节点有：  \n\n### 移动联通推荐\n\n``` code\n104.23.240.0-104.23.243.254\n```\n\n### 电信推荐\n\n``` code\n162.159.208.4-162.159.208.103\n162.159.209.4-162.159.209.103\n162.159.210.4-162.159.210.103\n162.159.211.4-162.159.211.103\n```\n\n> 这里可以在自己的域名服务商那里自定义使用哪个节点，各个节点不一定都可以使用，自己测试觉得可以再用吧\n\n修改完解析记录，等待DNS生效即可。","tags":["Hexo","CloudFlare","GitHub Page","GitHub"],"categories":["干货"]},{"title":"仿Google Design的导航栏和卡片设计","url":"/2019/11/13/仿Google Design导航栏和图片展示/","content":"\n纯CSS仿制[Google Design](https://design.google/library/)的导航栏和卡片信息。\n\n<!-- more -->\n\n> 由于要设计一个网页作为期末作业，所以我简单仿了一个Google Design的导航栏和卡片信息\n\n前后导航栏对比：\n\n![Google Design](https://cdn.jsdelivr.net/gh/adiynil/cloudimg@master/1573738565037-gdnavbar.png)\n\n![My design](https://cdn.jsdelivr.net/gh/adiynil/cloudimg@master/1573738605580-mydsnavbar.png)\n\n----\n\n## 导航栏HTML和CSS\n\n- HTML\n\n```html\n<div class=\"nav\">\n\t\t\t<ul>\n\t\t\t\t<div class=\"logo\">\n\t\t\t\t\t<img src=\"img/afeilogo.png\">\n\t\t\t\t</div>\n\t\t\t\t<div class=\"left\">\n\t\t\t\t\t<li><a class=\"active\" href=\"#home\">主页</a></li>\n\t\t\t\t\t<li><a href=\"#news\">新闻</a></li>\n\t\t\t\t\t<li><a href=\"#contact\">联系</a></li>\n\t\t\t\t\t<li><a href=\"#about\">关于</a></li>\n\t\t\t\t</div>\n\t\t\t\t<div class=\"right\">\n\t\t\t\t\t<li><a href=\"#contact\"><span class=\"glyphicon glyphicon-user\"></span>&nbsp;登录</a></li>\n\t\t\t\t</div>\n\t\t\t</ul>\n\t\t</div>\n```\n\n- CSS\n\n```css\n.nav ul {\n\t\t\tz-index: 999;\n\t\t    list-style-type: none;\n\t\t    margin: 0;\n\t\t    padding: 0;\n\t\t    overflow: hidden;\n\t\t    background-color: #FFFFFF;\n\t\t    position: fixed;\n\t\t    top: 0;\n\t\t    width: 100%;\n\t\t\tbox-shadow:0px 0px 4px #aaaaaa;\n\t\t}\n\t\t\n\t\t.nav  ul .left li{\n\t\t    float: left;\n\t\t}\n\t\t.nav  ul .right li{\n\t\t    float: right;\n\t\t}\n\t\t.nav  ul li a {\n\t\t\tmargin-left: 5px;\n\t\t\tmargin-right: 5px;\n\t\t    display: block;\n\t\t    color: gray;\n\t\t    text-align: center;\n\t\t    padding: 16px 18px;\n\t\t    text-decoration: none;\n\t\t}\n\t\t\n\t\t.nav  ul .left li a:hover:not(.active) {\n\t\t    border-bottom: 4px lightgray solid;\n\t\t}\n\t\t\n\t\t.nav  ul .right li a:hover:not(.active) {\n\t\t    color: #000000;\n\t\t}\n\t\t\n\t\t.nav  ul .left li .active {\n\t\t\tborder-bottom: 4px blue solid;\n\t\t    color: black;\n\t\t\tfont-weight: bold;\n\t\t}\n               .logo {\n\t\t\tmargin-top: 1px;\n\t\t\tmargin-left: 40px;\n\t\t\t\n\t\t\tfloat: left;\n\t\t\twidth: 250px;\n\t\t\theight: inherit;\n\t\t}\n\t\t.logo img {\n\t\t\twidth: 100%;\n\t\t}\n\t\t\n\t\t.content {\n\t\t\tdisplay: block;\n\t\t\tpadding: 0px;\n\t\t\tpadding-left: 40px;\n\t\t\tpadding-right: 40px;\n\t\t\tmargin-top: 70px;\n\t\t\tbackground-color: #FFFFFF;\n\t\t}\n```\n\n----\n\n卡片信息前后对比：\n\n![Google Design](https://cdn.jsdelivr.net/gh/adiynil/cloudimg@master/1573739071036-ss.png)\n\n![My design](https://cdn.jsdelivr.net/gh/adiynil/cloudimg@master/1573739167792-dd.png)\n\n## 卡片信息HTML和CSS\n\n- HTML\n\n```html\n<div class=\"container\">\n\t\t\t<div class=\"row\">\n\t\t\t\t<div class=\"col-12\">\n\t\t\t\t\t<div class=\"content\">\n\t\t\t\t\t\t<div class=\"breadcrumbs\">\n\t\t\t\t\t\t\t<label><span class=\"glyphicon glyphicon-home\"></span>&nbsp;&nbsp;首页&nbsp;></label>\n\t\t\t\t\t\t\t<label id=\"leb\" class=\"\">当前&nbsp;></label>\n\t\t\t\t\t\t\t<label id=\"leb\" class=\"\">当前&nbsp;></label>\n\t\t\t\t\t\t\t<label id=\"leb\" class=\"active\">当前</label>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div class=\"big\">\n\t\t\t\t\t\t\t<img src=\"img/test3.jpg\">\n\t\t\t\t\t\t\t<div class=\"title\">首页超大图的标准长两行的标题，最多只能显示两行如果两行就会是这个亚子的</div>\n\t\t\t\t\t\t\t<div class=\"desc\">如果是中文呢如果是中文呢如果是中文呢如果是中文呢，谁知道呢，中文字体不太好看的亚子啊\n\t\t\t\t\t\t\t那可怎么办呢，真难搞。</div>\n\t\t\t\t\t\t\t<div class=\"link\"><a href=\"#\">继续阅读...</a></div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div><!-- content end -->\n\t\t\t\t</div>\n\t\t\t\t<div class=\"col-12\">\n\t\t\t\t\t<div class=\"content-a\">\n\t\t\t\t\t\t<div class=\"col-4\">\n\t\t\t\t\t\t\t<div class=\"style-a\">\n\t\t\t\t\t\t\t\t<div class=\"thumbnail\">\n\t\t\t\t\t\t\t\t\t<a href=\"\"><img src=\"img/test.jpg\" /></a>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t<div class=\"content\">\n\t\t\t\t\t\t\t\t\t<div class=\"headline\">\n\t\t\t\t\t\t\t\t\t\t<label id=\"thislb\"></label>这是一条标准的中文标题，也许会很长呢\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t<div class=\"desc-content\">\n\t\t\t\t\t\t\t\t\t\t如果是中文呢如果是中文呢如果是中文呢如果是中文呢，谁知道呢，中文字体不太好看的亚子啊\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t<div class=\"info\">\n\t\t\t\t\t\t\t\t\t\t<div class=\"left\"><a href=\"#\"><img src=\"img/avatar.jpg\" />\n\t\t\t\t\t\t\t\t\t\t<span>Afei</span></a></div>\n\t\t\t\t\t\t\t\t\t\t<div class=\"right\"><a href=\"#\">#人文#</a></div>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div class=\"col-4\">\n\t\t\t\t\t\t\t<div class=\"style-a\">\n\t\t\t\t\t\t\t\t<div class=\"thumbnail\">\n\t\t\t\t\t\t\t\t\t<a href=\"\"><img src=\"img/test2.jpg\" /></a>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t<div class=\"content\">\n\t\t\t\t\t\t\t\t\t<div class=\"headline\">\n\t\t\t\t\t\t\t\t\t\tTitle of a longer featured blog post\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t<div class=\"desc-content\">\n\t\t\t\t\t\t\t\t\t\tMultiple lines of text that form the lede, informing new readers quickly and efficiently about what's most\n\t\t\t\t\t\t\t\t\t\tinteresting in this post's contents.\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t<div class=\"info\">\n\t\t\t\t\t\t\t\t\t\t<div class=\"left\"><a href=\"#\"><img src=\"img/avatar.jpg\" />\n\t\t\t\t\t\t\t\t\t\t<span>Afei</span></a></div>\n\t\t\t\t\t\t\t\t\t\t<div class=\"right\"><a href=\"#\">#Views#</a></div>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div class=\"col-4\">\n\t\t\t\t\t\t\t<div class=\"style-a\">\n\t\t\t\t\t\t\t\t<div class=\"thumbnail\">\n\t\t\t\t\t\t\t\t\t<a href=\"\"><img src=\"img/test2.jpg\" /></a>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t<div class=\"content\">\n\t\t\t\t\t\t\t\t\t<!-- headline或者desc-content -->\n\t\t\t\t\t\t\t\t\t<div class=\"info\">\n\t\t\t\t\t\t\t\t\t\t<div class=\"left\"><a href=\"#\"><img src=\"img/avatar.jpg\" />\n\t\t\t\t\t\t\t\t\t\t<span>Afei</span></a></div>\n\t\t\t\t\t\t\t\t\t\t<div class=\"right\"><a href=\"#\">#Views#</a></div>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div><!-- row end -->\n\t\t</div><!-- container end -->\n```\n\n- CSS\n\n```css\n.content-a {\n\t\tdisplay: block;\n\t\tpadding: 0px;\n\t\tpadding-left: 20px;\n\t\tpadding-right: 20px;\n\t\tmargin-bottom: 20px;\n\t\tmargin-top: 10px;\n\t\tbackground-color: #FFFFFF;\n\t}\n\t\n\t.style-a {\n\t\twidth: 100%;\n\t\theight: auto;\n\t\tpadding: 20px;\n\t\toverflow: hidden;\n\t\tmax-height: 500px;\n\t\tborder-bottom: 3px white solid;\n\t\tborder-bottom-right-radius: 3px;\n\t\tborder-bottom-left-radius: 3px;\n\t}\n\t.style-a:hover {\n\t\tbox-shadow:0px 0px 4px #aaaaaa;\n\t\tborder-bottom: 3px blue solid;\n\t\t\n\t}\n\t.style-a .thumbnail {\n\t\twidth: 100%;\n\t\tmax-height: 300px;\n\t\toverflow: hidden;\n\t}\n\t.style-a .thumbnail img {\n\t\twidth: 100%;\n\t}\n\t.style-a .content {\n\t\tmargin: 0;\n\t\tpadding: 0;\n\t}\n\t.style-a .content .headline {\n\t\tmargin: 0;\n\t\tpadding: 0;\n\t\tmargin-top: 15px;\n\t\tdisplay: -webkit-box;\n\t\t-webkit-line-clamp: 2;\n\t\t-webkit-box-orient: vertical;\n\t\toverflow: hidden;\n\t\tfont-size: 16px;\n\t\tfont-weight: bold;\n\t}\n\t.style-a .content .desc-content {\n\t\tmargin: 0;\n\t\tpadding: 0;\n\t\tmargin-top: 10px;\n\t\tdisplay: -webkit-box;\n\t\t-webkit-line-clamp: 3;\n\t\t-webkit-box-orient: vertical;\n\t\toverflow: hidden;\n\t\tfont-size: 14px;\n\t}\n\t.style-a .content .info {\n\t\tmargin: 0;\n\t\tpadding: 0;\n\t\tmargin-top: 10px;\n\t\tfont-size: 12px;\n\t\tfont-weight: bold;\n\t\t\n\t}\n\t.style-a .content .info img {\n\t\theight: 20px;\n\t\tborder-radius: 50%;\n\t\tvertical-align: middle;\n\t}\n\t.style-a .content .info a {\n\t\ttext-decoration: none;\n\t\tcolor: dimgray;\n\t}\n\t.style-a .content .info a:hover {\n\t\tcolor: royalblue;\n\t}\n\t\n\t.style-a .content .info .left {\n\t\tfloat: left;\n\t}\n\t.style-a .content .info .left span {\n\t\tmargin-left: 4px;\n\t}\n\t.style-a .content .info .right {\n\t\tfloat: right;\n\t}\n```","tags":["Google","CSS","HTML"],"categories":["个人笔记"]}]